{"name":"Simple-naive-bayes-classifier-for-php","tagline":"Very basic implementation of Naive Bayes Classifier in PHP","body":"# Simple NaiveBayesClassifier for PHP\r\n\r\nThis project is somewhat a fork of a Ruby implementation of [Naive Bayes Classifier](https://github.com/alexandru/stuff-classifier). There is a blog post [here](http://bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html) finely written and simple in its algorithm which I'm sure just about anyone can implement in any programming language.\r\n\r\nThe project is implemented in PHP in its simplest form. Fork it and play with the codes.\r\n\r\nMajor redesign with the codes to only use Redis as store. Very impressive benchmarks.\r\n- Redis using php-redis extension - https://github.com/nicolasff/phpredis\r\n\r\n\r\n## Changelist\r\n\r\n[18 October 2012]\r\nAdded offset/row to classify method and also deTrain method to tackle data updates if applicable.\r\n\r\n[14 October 2012]\r\nOptimization - Classify method and Redis store are updated to do calculations after all the data is acquired first to speed up results.\r\n\r\n\r\n## How To Use/Test\r\n\r\nRun the index.php file on command line, any arguments passed after the index.php file will be treated as keywords.\r\n\r\n```bash\r\n$ php index.php technology apple mobile\r\n```\r\n\r\n## Performance\r\n\r\nVery high performance by implementing the store with Redis. Using hashmaps and namespacing to minimize classifying time.\r\n\r\nHardware:\r\n- Macbook Air Late 2011\r\n- Intel Core i5 1.7 GHz\r\n- 4 GB DDR3 Memory\r\n- 128 GB SSD\r\n\r\nDatasets:\r\n- 1,212 Sets\r\n- 319,384 KeywordSets\r\n\r\nClassifier:\r\n- 1 word: pizza => 0.01428 seconds\r\n- 2 words: pizza pasta => 0.02171 seconds\r\n- 3 words: pizza pasta meatball => 0.04062 seconds","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}